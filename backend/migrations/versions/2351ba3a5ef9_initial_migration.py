"""Initial migration

Revision ID: 2351ba3a5ef9
Revises: 0e0b13cebfbc
Create Date: 2025-03-20 00:00:07.298985

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2351ba3a5ef9'
down_revision: Union[str, None] = '0e0b13cebfbc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('health_records')
    op.drop_table('meal_plan_recipes')
    op.drop_table('meal_plans')
    op.drop_table('meals')
    op.drop_table('recipes')
    op.drop_table('users')
    op.drop_table('meal_nutrition_tags')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('meal_nutrition_tags',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='meal_nutrition_tags_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('recipes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cooking_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('difficulty', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='recipes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('meals',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('meal_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('recipe_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], name='meals_recipe_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='meals_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='meals_pkey')
    )
    op.create_table('meal_plans',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='meal_plans_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='meal_plans_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('meal_plan_recipes',
    sa.Column('meal_plan_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('recipe_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['meal_plan_id'], ['meal_plans.id'], name='meal_plan_recipes_meal_plan_id_fkey'),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], name='meal_plan_recipes_recipe_id_fkey'),
    sa.PrimaryKeyConstraint('meal_plan_id', 'recipe_id', name='meal_plan_recipes_pkey')
    )
    op.create_table('health_records',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gender', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('height', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bmi', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('blood_pressure_systolic', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('blood_pressure_diastolic', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('blood_sugar', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hba1c', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cholesterol_total', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cholesterol_hdl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cholesterol_ldl', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('triglycerides', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liver_got', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liver_gpt', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liver_r_gpt', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('anomalies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='health_records_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='health_records_pkey')
    )
    # ### end Alembic commands ###
